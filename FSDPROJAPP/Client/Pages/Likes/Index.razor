@page "/likes/"
@using FSDPROJAPP.Shared.Domain
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Likes</h3>
<br />

<a href="/likes/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Like
</a>
<br />
<br />

@if (Likes == null)
{
    <div class="alert alert-info">Loading Likes...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Names</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var like in Likes)
            {
                <tr>
                    <td>@like.Name</td>
                    <td>
                        <a href="/likes/view/@like.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/likes/edit/@like.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(like.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Like>? Likes;

    protected async override Task OnInitializedAsync()
    {
        Likes = await _client.GetFromJsonAsync<List<Like>>($"{Endpoints.LikesEndpoint}");
    }

    async Task Delete(int likeId)
    {
        if (Likes != null)
        {
            var like = Likes.First(q => q.Id == likeId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {like.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.LikesEndpoint}/{likeId}");
                await OnInitializedAsync();
            }
        }
    }
}
